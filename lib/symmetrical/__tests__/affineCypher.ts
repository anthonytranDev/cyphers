import { createCypher, encode } from '../affineCypher'
import type { Key } from '../affineCypher'

describe('createCypher', () => {
  it.each([
    [
      [1, 0],
      {
        a: 'a',
        b: 'b',
        c: 'c',
        d: 'd',
        e: 'e',
        f: 'f',
        g: 'g',
        h: 'h',
        i: 'i',
        j: 'j',
        k: 'k',
        l: 'l',
        m: 'm',
        n: 'n',
        o: 'o',
        p: 'p',
        q: 'q',
        r: 'r',
        s: 's',
        t: 't',
        u: 'u',
        v: 'v',
        w: 'w',
        x: 'x',
        y: 'y',
        z: 'z',
      },
    ],
    [
      [1, 26],
      {
        a: 'a',
        b: 'b',
        c: 'c',
        d: 'd',
        e: 'e',
        f: 'f',
        g: 'g',
        h: 'h',
        i: 'i',
        j: 'j',
        k: 'k',
        l: 'l',
        m: 'm',
        n: 'n',
        o: 'o',
        p: 'p',
        q: 'q',
        r: 'r',
        s: 's',
        t: 't',
        u: 'u',
        v: 'v',
        w: 'w',
        x: 'x',
        y: 'y',
        z: 'z',
      },
    ],
    [
      [3, 0],
      {
        a: 'a',
        b: 'j',
        c: 's',
        d: 'b',
        e: 'k',
        f: 't',
        g: 'c',
        h: 'l',
        i: 'u',
        j: 'd',
        k: 'm',
        l: 'v',
        m: 'e',
        n: 'n',
        o: 'w',
        p: 'f',
        q: 'o',
        r: 'x',
        s: 'g',
        t: 'p',
        u: 'y',
        v: 'h',
        w: 'q',
        x: 'z',
        y: 'i',
        z: 'r',
      },
    ],
    [
      [5, 0],
      {
        a: 'a',
        b: 'v',
        c: 'q',
        d: 'l',
        e: 'g',
        f: 'b',
        g: 'w',
        h: 'r',
        i: 'm',
        j: 'h',
        k: 'c',
        l: 'x',
        m: 's',
        n: 'n',
        o: 'i',
        p: 'd',
        q: 'y',
        r: 't',
        s: 'o',
        t: 'j',
        u: 'e',
        v: 'z',
        w: 'u',
        x: 'p',
        y: 'k',
        z: 'f',
      },
    ],
    [
      [5, 1],
      {
        a: 'f',
        b: 'a',
        c: 'v',
        d: 'q',
        e: 'l',
        f: 'g',
        g: 'b',
        h: 'w',
        i: 'r',
        j: 'm',
        k: 'h',
        l: 'c',
        m: 'x',
        n: 's',
        o: 'n',
        p: 'i',
        q: 'd',
        r: 'y',
        s: 't',
        t: 'o',
        u: 'j',
        v: 'e',
        w: 'z',
        x: 'u',
        y: 'p',
        z: 'k',
      },
    ],
    [
      [5, 6],
      {
        a: 'e',
        b: 'z',
        c: 'u',
        d: 'p',
        e: 'k',
        f: 'f',
        g: 'a',
        h: 'v',
        i: 'q',
        j: 'l',
        k: 'g',
        l: 'b',
        m: 'w',
        n: 'r',
        o: 'm',
        p: 'h',
        q: 'c',
        r: 'x',
        s: 's',
        t: 'n',
        u: 'i',
        v: 'd',
        w: 'y',
        x: 't',
        y: 'o',
        z: 'j',
      },
    ],
  ])(
    'returns a specific crypher object, for cypher key %s',
    (key: Key, cypher) => {
      expect(createCypher(key)).toEqual(cypher)
    }
  )
})

describe('encode', () => {
  it.each([
    ['rick', 'rick', [1, 0]],
    ['rick', 'rick', [1, 26]],
    ['rick and morty', 'rick and morty', [1, 26]],
    ['rick and morty', 'xusm anb ewxpi', [3, 0]],
    ['rick and morty', 'tmqc anl sitjk', [5, 0]],
    ['rick and morty', 'yrvh fsq xnyop', [5, 1]],
    ['rick and morty', 'xqug erp wmxno', [5, 6]],
  ])(
    'encodes the string message %s to give cyphertext %s when passed affine key %s',
    (message, cypherText, key: Key) => {
      expect(encode(message, key)).toEqual(cypherText)
    }
  )
})
